"""This script plots IVCV files together for files generated by QTC
Data must be """

import logging
import holoviews as hv
from holoviews import opts
hv.extension('matplotlib')

from ..forge.tools import customize_plot, holoplot, convert_to_df, config_layout
from ..forge.tools import twiny, relabelPlot
from ..forge.tools import plot_all_measurements, convert_to_EngUnits
from ..forge.specialPlots import dospecialPlots


class IVCV_QTC:

    def __init__(self, data, configs):

        self.log = logging.getLogger(__name__)
        self.data = convert_to_df(data, abs=True)
        self.config = configs
        self.df = []
        self.basePlots = None
        self.PlotDict = {"Name": "IVCV"}
        if "capacitance" in self.data[self.data["keys"][0]]["data"]:
            self.data["columns"].insert(3,"1C2") # because we are adding it later on
        self.measurements = self.data["columns"]

        if "voltage" in self.measurements:
            self.xaxis = "voltage"
            padidx = self.measurements.index("voltage")
            del self.measurements[padidx]

        # Convert the units to the desired ones
        for meas in self.measurements:
            unit = self.config["IVCV_QTC"].get(meas, {}).get("UnitConversion", None)
            if unit:
                self.data = convert_to_EngUnits(self.data, meas, unit)

        hv.renderer('bokeh')

    def run(self):
        """Runs the script"""

        # Add the 1/c^2 data to the dataframes
        for df in self.data["keys"]:
            if "capacitance" in self.data[df]["data"]:
                self.data[df]["data"].insert(3, "1C2", 1 / self.data[df]["data"]["capacitance"].pow(2))
                self.data[df]["units"].append("arb. units")
                self.data[df]["measurements"].append("1C2")

            elif "Capacity" in self.data[df]["data"]: # For wolfgangs data files
                self.data[df]["data"].insert(3, "1C2", 1 / self.data[df]["data"]["Capacity"].pow(2))
                self.data[df]["units"].append("arb. units")
                self.data[df]["measurements"].append("1C2")

        # Add the measurement to the list

        # Plot all Measurements
        self.basePlots = plot_all_measurements(self.data, self.config, self.xaxis, "IVCV_QTC", do_not_plot=("voltage[V]"))
        self.PlotDict["BasePlots"] = self.basePlots
        self.PlotDict["All"] = self.basePlots

        # Whiskers Plot
        self.WhiskerPlots = dospecialPlots(self.data, self.config, "IVCV_QTC", "BoxWhisker", self.measurements)
        if self.WhiskerPlots:
            self.PlotDict["Whiskers"] = self.WhiskerPlots
            self.PlotDict["All"] = self.PlotDict["All"] + self.WhiskerPlots

        # Reconfig the plots to be sure
        self.PlotDict["All"] = config_layout(self.PlotDict["All"], **self.config["IVCV_QTC"].get("Layout", {}))
        return self.PlotDict

